#!/usr/bin/env python3
"""
Client Configuration Script
Helps configure client environment variables for connecting to server.
"""

import os
import sys
from pathlib import Path


def create_client_config():
    """Interactive client configuration setup."""
    print("🎯 Omaha Poker Client Configuration")
    print("=" * 40)
    
    # Get current directory
    current_dir = Path.cwd()
    env_file = current_dir / ".env.client"
    
    # Check if .env.client already exists
    if env_file.exists():
        print(f"⚠️  Configuration file already exists: {env_file}")
        response = input("Do you want to overwrite it? (y/N): ").strip().lower()
        if response != 'y':
            print("Configuration cancelled.")
            return
    
    print("\nPlease provide the following configuration:")
    
    # Server Configuration
    use_multiple_servers = input("Configure multiple servers? (y/N): ").strip().lower() == 'y'
    
    if use_multiple_servers:
        print("\n📡 Multiple Server Configuration:")
        print("Enter server URLs one by one. Press Enter with empty input to finish.")
        server_urls = []
        i = 1
        while True:
            url = input(f"Server {i} URL (or press Enter to finish): ").strip()
            if not url:
                break
            server_urls.append(url)
            
            # HTTP is the only supported protocol
            
            i += 1
        
        if not server_urls:
            print("No servers configured, falling back to single server mode.")
            server_url = input("Server URL (default: http://localhost:5001): ").strip()
            if not server_url:
                server_url = "http://localhost:5001"
        else:
            server_url = None  # Will use SERVER_URLS instead
    else:
        # Single server configuration (backward compatible)
        server_url = input("Server URL (default: http://localhost:5001): ").strip()
        if not server_url:
            server_url = "http://localhost:5001"
        server_urls = None
    
    # Client ID
    client_id = input("Client ID (leave empty for auto-generation): ").strip()
    
    # Detection interval
    detection_interval = input("Detection interval in seconds (default: 10): ").strip()
    if not detection_interval:
        detection_interval = "10"
    
    # Debug mode
    debug_mode = input("Debug mode - use test images? (y/N): ").strip().lower()
    debug_mode = "true" if debug_mode == 'y' else "false"
    
    # Country
    country = input("Country templates (canada/usa, default: canada): ").strip().lower()
    if country not in ['canada', 'usa']:
        country = "canada"
    
    # Advanced settings
    print("\nAdvanced settings (press Enter for defaults):")
    
    connection_timeout = input("Connection timeout in seconds (default: 10): ").strip()
    if not connection_timeout:
        connection_timeout = "10"
    
    retry_attempts = input("Retry attempts (default: 3): ").strip()
    if not retry_attempts:
        retry_attempts = "3"
    
    retry_delay = input("Retry delay in seconds (default: 5): ").strip()
    if not retry_delay:
        retry_delay = "5"
    
    # HTTP is the only supported protocol
    
    # Create configuration content
    config_content = f"""# Omaha Poker Client Configuration
# Generated by config_client.py

# Server Connection"""
    
    if server_urls:
        # Multi-server configuration
        import json
        config_content += f"\nSERVER_URLS={json.dumps(server_urls)}"
        config_content += f"\n# Alternatively, you can use comma-separated URLs:"
        config_content += f"\n# SERVER_URLS={','.join([s['url'] if isinstance(s, dict) else s for s in server_urls])}"
    else:
        # Single server configuration (backward compatible)
        config_content += f"\nSERVER_URL={server_url}"
    
    if client_id:
        config_content += f"\nCLIENT_ID={client_id}"
    
    config_content += f"""

# Detection Settings
DETECTION_INTERVAL={detection_interval}
DEBUG_MODE={debug_mode}
COUNTRY={country}

# Connection Settings (default for all servers)
CONNECTION_TIMEOUT={connection_timeout}
RETRY_ATTEMPTS={retry_attempts}
RETRY_DELAY={retry_delay}
"""
    
    # Write configuration file
    try:
        with open(env_file, 'w') as f:
            f.write(config_content)
        
        print(f"\n✅ Configuration saved to: {env_file}")
        print("\nTo start the client, run:")
        print("python main_client.py")
        
        print("\nConfiguration summary:")
        if server_urls:
            print(f"  Server URLs ({len(server_urls)}):")
            for i, server in enumerate(server_urls, 1):
                if isinstance(server, dict):
                    print(f"    {i}. {server['url']} ({server['connector_type']})")
                else:
                    print(f"    {i}. {server} (auto)")
        else:
            print(f"  Server URL: {server_url}")
        print(f"  Client ID: {'Auto-generated' if not client_id else client_id}")
        print(f"  Detection interval: {detection_interval}s")
        print(f"  Debug mode: {debug_mode}")
        print(f"  Country: {country}")
        
    except Exception as e:
        print(f"❌ Error saving configuration: {str(e)}")
        sys.exit(1)


def show_usage():
    print("Usage: python config_client.py")
    print("\nThis script will help you configure the client to connect to your server.")
    print("\nOptions:")
    print("  --help    Show this help message")


if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] in ['--help', '-h']:
        show_usage()
    else:
        create_client_config()